#include <iostream>
#include <string>
#include <unistd.h>
#include "colors.h"
using namespace std;

// Test input: Test Failed: '23, 22, -5, -21, 21, 0, -12, -55, 9111, 1233, 1, 3, 5, 6, 7, 8, 9, 12, -11, 17\nMax = 9111\nMin = -55\nSum = 10374\nEvens: 22, 0, -12, 6, 8, 12, end\nPrimes: 23, 3, 5, 7, 17, end\nSearches:\nLooking for -5. Found at index: 2\nLooking for -4. Not Found!\nLooking for -3. Not Found!\nLooking for -2. Not Found!\nLooking for -1. Not Found!\nLooking for 0. Found at index: 5\nLooking for 1. Found at index: 10\nLooking for 2. Not Found!\nLooking for 3. Found at index: 11\nLooking for 4. Not Found!' != '23, 22, -5, -21, 21, 0, -12, -55, 9111, 1233, 1, 3, 5, 6, 7, 8, 9, 12, -11, 17\nMax = 9111\nMin = -55\nSum = 10374\nEvens: 22, 0, -12, 6, 8, 12, end\nPrimes: 23, 3, 5, 7, 17, end\nSearches:\nLooking for -5. Found at index: 2\nLooking for -4. Not found!\nLooking for -3. Not found!\nLooking for -2. Not found!\nLooking for -1. Not found!\nLooking for 0. Found at index: 5\nLooking for 1. Found at index: 10\nLooking for 2. Not found!\nLooking for 3. Found at index: 11\nLooking for 4. Not found!'
string input, program_output, autograder_answer;

void inputCleaner(string input, string& program_output, string& autograder_answer);
//Takes the string of output generated by the CS16 autograder results
//and seperates it into two strings: program_output and autograder_answer

int comparison(string program_output, string autograder_answer);
//Takes in the cleaned stings generated by inputCleaner and compares them
//Returns the index of the first mismatch during comparison
//If no differences found, returns -1

void outputGenerator(string program_output, string autograder_answer);
//Takes the output and answer strings and prints a snapshot of them.
//The snapshot should be 10 characters long.
//Indicates where the first error occurs in output (denoted by "^")

int main() {
    cout << "Paste one " << GREEN << "entire" << RESET 
         << " line of a failed autograder test below, "
         << "then press enter.\n";

    std::string total_input;
    int timesEncounteredQuote = 0;

    // we keep getting input until we encountered 4 single quotes
    // Test Failed: 'student' != 'grader' -> 4 quotes.
    do{
        cin >> input;
        if(input.find('\'') != -1 ){
            timesEncounteredQuote++;
        }
        // keep adding what we just got to a total_input string
        total_input += input + " ";    
    } while(timesEncounteredQuote < 4);

    // get rid of the last space in the input that will be there because of how we add
    total_input = total_input.substr(0, total_input.length() - 1);

    cout << "\n\n";

    inputCleaner(total_input, program_output, autograder_answer);
    outputGenerator(program_output, autograder_answer);
    
    return 0;
}

void inputCleaner(string input, string& program_output, string& autograder_answer) {
    string delimiter = " != ";

    // Strip the "Test Failed: '" part
    program_output = input.substr(input.find("\'") + 1);

    // Strip everything after " != " including the quote that goes before it
    program_output = program_output.substr(0, program_output.find(delimiter) - 1);

    // Strip everything before " != " including != itself. " != " -> length 4 + a quote right after = +5 in total
    autograder_answer = input.substr(input.find(delimiter) + 5);

    // String the last quote at the very end
    autograder_answer = autograder_answer.substr(0, autograder_answer.length() - 1);

}

int comparison(string program_output, string autograder_answer) {
    bool mismatch = false;
    int index;
    for(index = 0; index < autograder_answer.length(); index++) 
    {
        if (program_output[index] != autograder_answer[index]) 
        {
            mismatch = true;
            break;
        }
    }
    if (mismatch)
        return index;
    else
        return -1;
}

void outputGenerator(string program_output, string autograder_answer) {
    int error_index = comparison(program_output, autograder_answer);
    if (error_index == -1)
        //Handles errorless input
        cout << "No differences found!\n";
    else if (error_index < 5) 
    {
        //Handles errors occuring within the first 5 characters
        //of the failed test
        cout << "Error found at index: " << error_index << endl;
 
        //Add five spaces to the beginning of each string so the
        //snapshots can be printed even if errors occur within 
        //first five characters
        cout << ("     " + autograder_answer).substr(error_index, 10)
             << GREEN << " <-- Expected output" << RESET << endl;

        cout << ("     " + program_output).substr(error_index, 10)
             << RED << " <-- Resulting output" << RESET << endl;

        cout << RED << "     ^" << RESET << endl;
    } else
    {
        //Handles an error found after the first 5 characters
        cout << "Error found at index: " << error_index << endl;

        cout << autograder_answer.substr(error_index - 5, 10)
             << GREEN << " <-- Expected output" << RESET << endl;

        cout << program_output.substr(error_index - 5, 10)
             << RED << " <-- Resulting output" << RESET << endl;

        cout << RED << "     ^" << RESET << endl;
    }

}